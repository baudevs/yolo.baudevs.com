version: 1.1.0-beta
date: 2025-01-20
changes:
  - type: feature
    id: F001
    name: "Project Initialization"
    description: "Interactive project setup and configuration"
    status: implemented
    components:
      - init
      - core
      - templates
    impact: "Enables easy project creation with standardized structure"

  - type: feature
    id: F002
    name: "Project Visualization"
    description: "3D graph visualization of project relationships"
    status: implemented
    components:
      - graph
      - web
    impact: "Provides intuitive view of project structure"

  - type: feature
    id: F003
    name: "AI Integration"
    description: "Context-aware AI assistance"
    status: implemented
    components:
      - prompt
      - ai
    impact: "Enhances development with AI support"

  - type: feature
    id: F011
    name: "System-wide Keyboard Shortcuts"
    description: "Global access to YOLO commands"
    status: in_progress
    components:
      - shortcuts
      - web
      - macos
    impact: "Improves workflow efficiency"
    blockers:
      - "macOS daemon implementation"
      - "Linux support"
    completion:
      - "‚úÖ Web interface"
      - "‚úÖ Configuration system"
      - "‚úÖ WebSocket updates"
      - "üèóÔ∏è macOS daemon"
      - "üìÖ Linux support"

  - type: feature
    id: F012
    name: "Enhanced AI Integration"
    description: "Multi-provider AI support with configuration management"
    status: implemented
    components:
      - ai
      - config
      - providers
    impact: "Enables flexible AI provider selection and management"
    completion:
      - "‚úÖ OpenAI integration"
      - "‚úÖ Anthropic integration"
      - "‚úÖ Mistral AI support"
      - "‚úÖ Provider configuration"
      - "‚úÖ Testing command"

  - type: feature
    id: F013
    name: "Smart Commit System"
    description: "AI-powered Git commit workflow"
    status: implemented
    components:
      - commit
      - git
      - ai
    impact: "Streamlines Git operations with AI assistance"
    completion:
      - "‚úÖ AI commit message generation"
      - "‚úÖ Automatic staging"
      - "‚úÖ Remote syncing"
      - "‚úÖ Error analysis"

  - type: fix
    id: FIX001
    name: "Project Initialization Reliability"
    description: "Fixed issues with project creation and setup"
    status: implemented
    components:
      - init
      - core
    impact: "Ensures reliable project initialization"

  - type: fix
    scope: internal/commands/root.go
    subject: "add missing commands to root command"
    body: "fix(internal/commands/root.go): add missing commands to root command\n\nAdded all available commands to the root command to ensure they are accessible through the CLI. This includes: commit, epic, explain, feature, graph, init, prompt, rp, shortcuts, status, task, and ai commands."

  - type: fix
    scope: cmd/yolo/main.go
    subject: "add ask command to root command"
    body: "fix(cmd/yolo/main.go): add ask command to root command\n\nAdded the new 'ask' command to the main.go root command initialization to make it available in the CLI."

  - type: fix
    scope: cmd/yolo/main.go
    subject: "fix command function calls"
    body: "fix(cmd/yolo/main.go): fix command function calls\n\nFixed command function calls in main.go by adding missing parentheses and correcting command names. Changed AICmd to AiConfigureCmd and added parentheses to GraphCmd and ShortcutsCmd calls."

  - type: fix
    scope: cmd/yolo/main.go
    subject: "fix command references"
    body: "fix(cmd/yolo/main.go): fix command references\n\nFixed command references in main.go to use the correct command variables and functions. GraphCmd and ShortcutsCmd are variables while AICmd() is a function."

  - type: fix
    scope: internal/ai
    subject: "fix build errors in AI client"
    body: "fix(internal/ai): fix build errors in AI client\n\nFixed build errors in AI client by:\n- Using GetAPIKey() instead of accessing OpenAIKey directly\n- Using GPT3Dot5Turbo constant instead of config.Model\n- Fixed API key checks to use GetAPIKey()"

  - type: fix
    scope: internal/commands
    subject: "update ask command for new AI client"
    body: "fix(internal/commands): update ask command for new AI client\n\nUpdated ask command to work with the new AI client and license manager:\n- Added license manager initialization\n- Updated AI client creation with new signature\n- Simplified personality handling\n- Added proper error handling"

migrations:
  - version: 1.0.0-beta
    date: 2024-01-17
    changes:
      - "Updated project structure"
      - "Enhanced documentation"
      - "Improved error handling"
    rollback:
      - "Revert to previous directory structure"
      - "Restore old documentation format"

  - type: feat
    scope: internal/git
    subject: "add summary of changes functionality"
    body: "feat(internal/git): add summary of changes functionality\n\nAdded the ability to get a summary of changes, including staged changes, unstaged changes, and untracked files. Also implemented a feature to provide a short diff for context, with truncation if too long."

  - type: docs
    scope: internal/commands/commit.go
    subject: "update YOLO documentation"
    body: "docs(internal/commands/commit.go): update YOLO documentation\n\nUpdate YOLO documentation in the project story by creating a new commit with the changes."

  - type: feat
    scope: internal/commands
    subject: "add AI programming question command"
    body: "feat(internal/commands): add AI programming question command\n\nAdded a new 'ask' command that allows users to ask programming questions and get witty responses with 3 simple steps to solve them. The response style changes based on the user's selected personality level (NerdyClean, MildlyRude, or UnhingedFunny)."

  - type: feat
    scope: internal/commands
    subject: "add AI programming question command"
    body: "feat(internal/commands): add AI programming question command\n\nAdded a new 'ask' command that allows users to ask programming questions and get witty responses with 3 simple steps to solve them. The response style changes based on the user's selected personality level (NerdyClean, MildlyRude, or UnhingedFunny)."

  - type: refactor
    scope: internal/ai
    subject: "create reusable AI client"
    body: "refactor(internal/ai): create reusable AI client\n\nCreated a new reusable AI client that can be used across different commands. Moved the OpenAI interaction logic into a dedicated client.go file and updated the commit AI to use this new client."

  - type: refactor
    scope: internal/ai
    subject: "create reusable AI client"
    body: "refactor(internal/ai): create reusable AI client\n\nCreated a new reusable AI client that can be used across different commands. Moved the OpenAI interaction logic into a dedicated client.go file and updated the commit AI to use this new client."

  - type: refactor
    scope: internal/ai/commit.go
    subject: "refactor client initialization in CommitAI"
    body: "refactor(internal/ai/commit.go): refactor client initialization in CommitAI\n\nRefactored the client initialization in the CommitAI struct to use the openai.NewClient method with the provided API key. Removed the Config struct and DefaultProvider as they are no longer needed."

  - type: refactor
    scope: internal/commands
    subject: "remove unused root.go file"
    body: "refactor(internal/commands): remove unused root.go file\n\nRemoved the unused root.go file since all command initialization and root command configuration is handled in cmd/yolo/main.go. This simplifies the codebase and removes potential confusion about where commands should be registered."

  - type: fix
    scope: cmd/yolo/main.go
    subject: "add ask command to root command"
    body: "fix(cmd/yolo/main.go): add ask command to root command\n\nAdded the new 'ask' command to the main.go root command initialization to make it available in the CLI."

  - type: feat
    scope: internal/license
    subject: "add license management system"
    body: "feat(internal/license): add license management system\n\nAdded a new license management system that allows users to either use their own OpenAI API key or purchase credits through Gumroad. Features include:\n- License verification through Gumroad API\n- Credit tracking and deduction per AI request\n- Configurable credit costs per token\n- New 'license' command for managing licenses"

  - type: feat
    scope: internal/ai
    subject: "integrate license manager with AI client"
    body: "feat(internal/ai): integrate license manager with AI client\n\nUpdated the AI client to work with the new license management system:\n- Support for both user API keys and our default key\n- Credit deduction for AI requests when using our key\n- Improved error messages with clear instructions"

  - type: feat
    scope: internal/license
    subject: "integrate Gumroad credit management"
    body: "feat(internal/license): integrate Gumroad credit management\n\nEnhanced license manager to use Gumroad's API for credit management:\n- Store credits in Gumroad's metadata\n- Sync credit balance with Gumroad on each operation\n- Refresh credits from Gumroad when local balance is low\n- Better error handling and validation"

  - type: feat
    scope: internal/license
    subject: "add credit packages"
    body: "feat(internal/license): add credit packages\n\nAdded credit package definitions and improved purchase command:\n- Starter Pack: 5,000 credits ($5)\n- Pro Pack: 25,000 credits ($20)\n- Team Pack: 100,000 credits ($60)\n- Enterprise Pack: 500,000 credits ($200)\n- Unlimited Monthly: Unlimited credits ($99/month)\n\nEnhanced purchase command to show detailed package information including estimated query counts and rate limits."
